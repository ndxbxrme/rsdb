{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "../src/",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\r\n\r\nalasql = require 'alasql'\r\nObjectID = require 'bson-objectid'\r\nobjtrans = require 'objtrans'\r\nutils = require './utils'\r\nconsole.log 'HELLO'\r\n\r\nmodule.exports = (config) ->\r\n  dbUser = null\r\n  maintenanceMode = false\r\n  config.maxSqlCacheSize = config.maxSqlCacheSize or 100\r\n  config.encryptionKey = config.encryptionKey or process.env[config.appName + '_ENCRYPTION_KEY'] or 'meG4Ran4om'\r\n  storage = require('./storage') config\r\n  storage.checkDataDir()\r\n  database = null\r\n  sqlCache = {}\r\n  sqlCacheSize = 0\r\n  resetSqlCache = ->\r\n    sqlCache = {}\r\n    sqlCacheSize = 0\r\n  callbacks =\r\n    ready: []\r\n    insert: []\r\n    update: []\r\n    select: []\r\n    delete: []\r\n    preInsert: []\r\n    preUpdate: []\r\n    preSelect: []\r\n    preDelete: []\r\n    selectTransform: []\r\n    restore: []\r\n  callback = (name, obj) ->\r\n    return true if not callbacks[name].length\r\n    truth = false\r\n    for cb in callbacks[name]\r\n      truth = truth or await cb obj\r\n    truth\r\n  getId = (row) ->\r\n    row._id or row.id or row._id or row.i\r\n  getIdField = (row) ->\r\n    '_id'\r\n  restoreDatabase = (data) ->\r\n    for key of data\r\n      if database.tables[key]\r\n        database.exec 'DELETE FROM ' + key\r\n        database.exec 'INSERT INTO ' + key + ' SELECT * FROM ?', [data[key].data]\r\n    callback 'restore', database\r\n  inflate = (from, getFn) ->\r\n    getFn = storage.get if not getFn\r\n    keys = await storage.keys from, config.database + ':node:'\r\n    for key in keys.Contents\r\n      key.Key.replace /(.+):(.+):(.+)\\/(.+)(:.+)*/, (all, db, type, table, id, randId) ->\r\n        if db and table and id and db.substr(db.lastIndexOf('/') + 1) is config.database\r\n          o = await getFn key.Key\r\n          if o._id\r\n            database.exec 'DELETE FROM ' + table + ' WHERE _id=?', [o._id]\r\n            if not o['__!deleteMe!']\r\n              database.exec 'INSERT INTO ' + table + ' VALUES ?', [o]\r\n    if keys.IsTruncated\r\n      await inflate keys.Contents[keys.Contents.length-1].Key\r\n  deleteKeys = ->\r\n    keys = await storage.keys null, config.database + ':node:'\r\n    for key in keys.Contents\r\n      await storage.del key.Key\r\n    if keys.IsTruncated\r\n      await deleteKeys()\r\n  saveDatabase = ->\r\n    await storage.put config.database + ':database', database.tables\r\n    maintenanceMode = false\r\n  attachDatabase = ->\r\n    maintenanceMode = true\r\n    alasql 'CREATE DATABASE ' + config.database\r\n    alasql 'USE ' + config.database\r\n    for table in config.tables\r\n      alasql 'CREATE TABLE ' + table\r\n    database = alasql.databases[config.database]\r\n    alasql.MAXSQLCACHESIZE = config.maxSqlCacheSize\r\n    if config.awsOk or config.localStorage\r\n      try\r\n        o = await storage.get config.database + ':database'\r\n        await restoreDatabase o\r\n        await inflate()\r\n        await deleteKeys()\r\n        await saveDatabase()\r\n        callback 'ready', database\r\n      catch e\r\n        console.log e\r\n    else\r\n      maintenanceMode = false\r\n      callback 'ready', database\r\n  restoreFromBackup = () ->\r\n    new Promise (resolve) ->\r\n      maintenanceMode = true\r\n      o = await storage.get ''\r\n      await restoreDatabase o\r\n      await deleteKeys()\r\n      await saveDatabase()\r\n      console.log \"backup restored\"\r\n      callback 'restore', null\r\n      resolve()\r\n  exec = (sql, props, notCritical, isServer, changes) ->\r\n    if maintenanceMode\r\n      return []\r\n    hash = (str) ->\r\n      h = 5381\r\n      i = str.length\r\n      while i\r\n        h = (h * 33) ^ str.charCodeAt --i\r\n      h\r\n    hh = hash sql\r\n    ast = sqlCache[hh]\r\n    if not ast\r\n      ast = alasql.parse sql\r\n    if not (ast.statements and ast.statements.length)\r\n      return []\r\n    else\r\n      if sqlCacheSize > database.MAX_SQL_CACHE_SIZE\r\n        resetSqlCache()\r\n      sqlCacheSize++\r\n      sqlCache[hh] = ast\r\n    args = [].slice.call arguments\r\n    args.splice 0, 3\r\n    error = ''\r\n    for statement in ast.statements\r\n      table = ''\r\n      isUpdate = statement instanceof alasql.yy.Update\r\n      isInsert = statement instanceof alasql.yy.Insert\r\n      isDelete = statement instanceof alasql.yy.Delete\r\n      isSelect = statement instanceof alasql.yy.Select\r\n      if statement.into\r\n        table = statement.into.tableid\r\n        isInsert = true\r\n        isSelect = false\r\n      else if statement.table then table = statement.table.tableid\r\n      else if statement.from and statement.from.lenth then table = statement.from[0].tableid\r\n      if isInsert\r\n        if Object.prototype.toString.call(props[0]) is '[object Array]'\r\n          for prop in props[0]\r\n            if not prop._id\r\n              prop._id = ObjectID.generate()\r\n        else\r\n          if not props[0]._id\r\n            props[0]._id = ObjectID.generate()\r\n      updateIds = []\r\n      if isUpdate\r\n        idWhere = ''\r\n        idProps = []\r\n        if statement.where\r\n          idWhere = ' WHERE ' + statement.where.toString().replace /\\$(\\d+)/g, (all, p) ->\r\n            if props.length > +p\r\n              idProps.push props[+p]\r\n            '?'\r\n        updateIds = database.exec 'SELECT *, \\'' + table + '\\' as rstable FROM ' + table + idWhere, idProps\r\n      else if isDelete\r\n        idWhere = ''\r\n        if statement.where\r\n          idWhere = ' WHERE ' + statement.where.toString().replace /\\$(\\d+)/g, '?'\r\n        res = database.exec 'SELECT * FROM ' + table + idWhere, props\r\n        if res and res.length\r\n          for r in res\r\n            delObj =\r\n              '__!deleteMe!': true\r\n            delObj[getIdField(r)] = getId r\r\n            storage.put config.database + ':node:' + table + '/' + getId(r), delObj, null, notCritical\r\n            callback (if isServer then 'serverDelete' else 'delete'), \r\n              op: 'delete'\r\n              id: getId r\r\n              table: table\r\n              obj: delObj\r\n              user: dbUser\r\n              isServer: isServer\r\n      else if isInsert\r\n        if Object.prototype.toString.call(props[0]) is '[object Array]'\r\n          for prop in props[0]\r\n            if config.autoDate\r\n              prop.u = new Date().valueOf()\r\n            storage.put config.database + ':node:' + table + '/' + getId(prop), prop, null, notCritical\r\n            callback (if isServer then 'serverInsert' else 'insert'), \r\n              op: 'insert'\r\n              id: getId prop\r\n              table: table\r\n              obj: prop\r\n              args: args\r\n              user: dbUser\r\n              isServer: isServer\r\n        else\r\n          if config.autoDate\r\n            props[0].u = new Date().valueOf();\r\n          storage.put config.database + ':node:' + table + '/' + getId(props[0]), props[0], null, notCritical\r\n          callback (if isServer then 'serverInsert' else 'insert'),\r\n            op: 'insert'\r\n            id: getId props[0]\r\n            table: table\r\n            obj: props[0]\r\n            user: dbUser\r\n            args: args\r\n            isServer: isServer\r\n    output = database.exec sql, props   \r\n    if updateIds and updateIds.length\r\n      for updateId in updateIds\r\n        if config.autoDate\r\n          database.exec 'UPDATE ' + updateId.rstable + ' SET u=? WHERE ' + getIdField(updateId) + '=?', [new Date().valueOf(), getId(updateId)]\r\n        res = database.exec 'SELECT * FROM ' + updateId.rstable + ' WHERE ' + getIdField(updateId) + '=?', [getId(updateId)]\r\n        if res and res.length\r\n          r = res[0]\r\n          storage.put config.database + ':node:' + updateId.rstable + '/' + getId(r), r, null, notCritical\r\n          callback (if isServer then 'serverUpdate' else 'update'),\r\n            op: 'update'\r\n            id: getId r\r\n            table: updateId.rstable\r\n            obj: r\r\n            args: args\r\n            changes: changes\r\n            user: dbUser\r\n            isServer: isServer\r\n    if error\r\n      output.error = error\r\n    output\r\n  select = (table, args, isServer) ->\r\n    new Promise (resolve, reject) ->\r\n      ((user) ->\r\n        result = await callback (if isServer then 'serverPreSelect' else 'preSelect'), \r\n          op: 'select'\r\n          table: table\r\n          args: args\r\n          user: user\r\n        if not result\r\n          return resolve []\r\n        args = args or {}\r\n        where = utils.makeWhere if args.where then args.where else args\r\n        sorting = ''\r\n        if args.sort\r\n          if Object.prototype.toString.call(args.sort) is '[object Object]'\r\n            sorting += ' ORDER BY '\r\n            i = 0\r\n            for key of args.sort\r\n              if i++ > 0\r\n                sorting += ', '\r\n              bit = args.sort[key]\r\n              mykey = key.replace /\\./g, '->'\r\n              if bit is 1 or bit is 'ASC'\r\n                sorting += \"`#{mykey}` ASC\"\r\n              else\r\n                sorting += \"`#{mykey}` DESC\"\r\n          else\r\n            args.sort = args.sort.replace /\\./g, '->'\r\n            sorting += \" ORDER BY `#{args.sort}`\"\r\n            if args.sortDir\r\n              sorting += \" #{args.sortDir}\"\r\n        if where.sql\r\n          where.sql = \" WHERE #{where.sql}\"\r\n        dbUser = user\r\n        output = exec \"SELECT * FROM #{table}#{where.sql}#{sorting}\", where.props, null, isServer\r\n        await callback (if isServer then 'serverSelect' else 'select'), \r\n          op: 'select'\r\n          table: table\r\n          objs: output\r\n          isServer: isServer\r\n          user: user\r\n        total = output.length\r\n        if args.page or args.pageSize\r\n          args.page = args.page or 1\r\n          args.pageSize = args.pageSize or 10\r\n          output = output.splice (args.page - 1) * args.pageSize, args.pageSize\r\n        await callback (if isServer then 'serverSelectTransform' else 'selectTransform'),\r\n          op: 'select'\r\n          transformer: args.transformer\r\n          table: table\r\n          objs: output\r\n          isServer: isServer\r\n          user: user\r\n        resolve output\r\n      )(dbUser)\r\n  selectOne = (table, args, isServer) ->\r\n    output = await select table, args, null, isServer\r\n    if output and output.length\r\n      return output[0]\r\n    else\r\n      return null\r\n  update = (table, obj, whereObj, isServer) ->\r\n    new Promise (resolve, reject) ->\r\n      utils.cleanObj obj\r\n      where = utils.makeWhere whereObj\r\n      if where.sql\r\n        where.sql = \" WHERE #{where.sql}\"\r\n      ((user) ->\r\n        oldItems = exec \"SELECT * FROM #{table}#{where.sql}\", where.props, null, true\r\n        for oldItem in oldItems\r\n          diffs = readDiffs oldItem, obj\r\n          id = getId oldItem\r\n          result = await callback (if isServer then 'serverPreUpdate' else 'preUpdate'),\r\n            op: 'update'\r\n            id: id\r\n            table: table\r\n            obj: obj\r\n            oldObj: oldItem\r\n            where: whereObj\r\n            changes: diffs\r\n            user: user\r\n          if not result\r\n            return resolve []\r\n          updateSql = []\r\n          updateProps = []\r\n          for key of obj\r\n            if where.props.indexOf(obj[key]) is -1\r\n              updateSql.push \" `#{key}`=? \"\r\n              updateProps.push obj[key]\r\n          updateProps.push id\r\n          dbUser = user\r\n          exec \"UPDATE #{table} SET #{updateSql.join(',')} WHERE `#{[settings.AUTO_ID]}`= ?\", updateProps, null, isServer, diffs\r\n        resolve []\r\n      )(dbUser)\r\n  insert = (table, obj, isServer) ->\r\n    new Promise (resolve, reject) ->\r\n      utils.cleanObj obj\r\n      ((user) ->\r\n        result = await callback (if isServer then 'serverPreInsert' else 'preInsert'),\r\n          op: 'insert'\r\n          table: table\r\n          obj: obj\r\n          user: user\r\n        if not result\r\n          return resolve []\r\n        dbUser = user\r\n        if Object.prototype.toString.call(obj) is '[object Array]'\r\n          exec \"INSERT INTO #{table} SELECT * FROM ?\", [obj], null, isServer\r\n        else\r\n          exec \"INSERT INTO #{table} VALUES ?\", [obj], null, isServer\r\n        resolve []\r\n      )(dbUser)\r\n  upsert = (table, obj, whereObj, isServer) ->\r\n    new Promise (resolve, reject) ->\r\n      where = utils.makeWhere whereObj\r\n      if not whereObj and obj._id\r\n        whereObj = {}\r\n        whereObj._id = obj._id\r\n        where = utils.makeWhere whereObj\r\n      if where.sql\r\n        where.sql = \" WHERE #{where.sql}\"\r\n      test = exec \"SELECT * FROM #{table}#{where.sql}\", where.props, null, isServer\r\n      if test and test.length and where.sql\r\n        resolve update table, obj, whereObj, isServer\r\n      else\r\n        resolve insert table, obj, isServer\r\n  del = (table, whereObj, isServer) ->\r\n    new Promise (resolve, reject) ->\r\n      where = utils.makeWhere whereObj\r\n      if where.sql\r\n        where.sql = \" WHERE #{where.sql}\"\r\n      ((user) ->\r\n        result = await callback (if isServer then 'serverPreDelete' else 'preDelete'),\r\n          op: 'delete'\r\n          table: table\r\n          where: whereObj\r\n          user: user\r\n        if not result\r\n          return resolve []\r\n        dbUser = user\r\n        exec \"DELETE FROM #{table}#{where.sql}\", where.props, null, isServer\r\n        resolve []\r\n      )(dbUser)  \r\n  consolidate = ->\r\n    await deleteKeys()\r\n    saveDatabase()\r\n  consolidateCheck = ->\r\n    keys = await storage.keys null, settings.DATABASE + ':node:'\r\n    if keys and keys.Contents and keys.Contents.length > (+config.consolidateCount or 500)\r\n      await consolidate()\r\n  if config.tables and config.tables.length\r\n    attachDatabase()\r\n  else\r\n    console.log 'No tables configured'\r\n\r\n  dbObj =  \r\n    on: (name, callback) ->\r\n      callbacks[name].push callback\r\n      @\r\n    off: (name, callback) ->\r\n      callbacks[name].splice callbacks[name].indexOf(callback), 1\r\n      @\r\n    exec: exec\r\n    select: select\r\n    selectOne: selectOne\r\n    update: update\r\n    insert: insert\r\n    upsert: upsert\r\n    delete: del\r\n    saveDatabase: saveDatabase\r\n    restoreFromBackup: restoreFromBackup\r\n    consolidate: consolidate\r\n    setUser: (user) ->\r\n      dbUser = user\r\n  if config.tables\r\n    for table in config.tables\r\n      ((table) ->\r\n        dbObj[table] =\r\n          select: (args, isServer) ->\r\n            select table, args, isServer\r\n          selectOne: (args, isServer) ->\r\n            select table, args, isServer\r\n          update: (obj, whereObj, isServer) ->\r\n            update table, obj, whereObj, isServer\r\n          insert: (obj, isServer) ->\r\n            insert table, obj, isServer\r\n          upsert: (obj, whereObj, isServer) ->\r\n            upsert table, obj, whereObj, isServer\r\n          delete: (whereObj, isServer) ->\r\n            del table, whereObj, isServer\r\n          on: (name, callback) ->\r\n            callbacks[name].push (args, cb) ->\r\n              if args.table is table\r\n                callback args, cb\r\n              else\r\n                cb true\r\n      ) table\r\n  dbObj"
  ]
}