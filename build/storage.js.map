{
  "version": 3,
  "file": "storage.js",
  "sourceRoot": "../src/",
  "sources": [
    "storage.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "jsonStream = require 'JSONStream'\r\nes = require 'event-stream'\r\nzlib = require 'zlib'\r\ncrypto = require 'crypto'\r\n\r\nmodule.exports = (config) ->\r\n  encryptionKey = Buffer.alloc 32\r\n  iv = Buffer.alloc(16, 0)\r\n  encryptionKey = Buffer.concat [Buffer.from(config.encryptionKey)], encryptionKey.length\r\n  algorithm = config.encryptionAlgorithm or 'aes-256-ctr'\r\n  doencrypt = !config.doNotEncrypt\r\n  dozip = !config.doNotEncrypt\r\n  local = require('./local') config\r\n  devices = []\r\n  if config.localStorage\r\n    devices.push local\r\n  #S3\r\n  checkDataDir: ->\r\n    if config.localStorage\r\n      local.checkDataDir()\r\n  keys: (from, prefix) ->\r\n    new Promise (resolve, reject) ->\r\n      return reject 'no storage' if not devices.length\r\n      resolved = false\r\n      for device in devices\r\n        try\r\n          return resolve await device.keys from, prefix\r\n      reject 'nothing found'\r\n  del: (key) ->\r\n    for device in devices\r\n      await device.del key\r\n  put: (key, o) ->\r\n    new Promise (resolve, reject) ->\r\n      jsStringify = new jsonStream.stringify()\r\n      encrypt = crypto.createCipheriv algorithm, encryptionKey, iv\r\n      gzip = zlib.createGzip()\r\n      st = null\r\n      ws = null\r\n      if dozip\r\n        st = jsStringify.pipe gzip\r\n      if doencrypt\r\n        if st\r\n          st = st.pipe encrypt\r\n        else\r\n          st = jsStringify.pipe encrypt\r\n      if not st\r\n        st = jsStringify\r\n      if writeStream\r\n        st = st.pipe writeStream\r\n      else\r\n        for device in devices\r\n          writeStream = device.getWriteStream(key)\r\n          st = st.pipe writeStream\r\n      jsStringify.write o, ->\r\n        jsStringify.flush()\r\n      jsStringify.end()\r\n      st.on 'close', resolve\r\n      st.on 'error', reject\r\n      writeStream.on 'error', reject\r\n      writeStream.on 'uploaded', resolve\r\n      gzip.on 'error', reject\r\n      encrypt.on 'error', reject\r\n  get: (key) ->\r\n    new Promise (resolve, reject) ->\r\n      jsParse = new jsonStream.parse '*'\r\n      decrypt = crypto.createDecipheriv algorithm, encryptionKey, iv\r\n      gunzip = zlib.createGunzip()\r\n      finished = false\r\n      for device in devices\r\n        if not finished\r\n          reader = device.getReadStream key\r\n          st = reader\r\n          if doencrypt\r\n            st = st.pipe decrypt\r\n          if dozip\r\n            st = st.pipe gunzip\r\n          st.pipe jsParse\r\n          .pipe es.mapSync (data) ->\r\n            finished = true\r\n            resolve data\r\n          reader.on 'error', resolve\r\n          st.on 'error', resolve\r\n          jsParse.on 'error', (e) ->\r\n            console.log 'Error parsing database - have you changed your encryption key or turned encryption on or off?  If so, update your database using ndx-framework.'\r\n            reject()"
  ]
}