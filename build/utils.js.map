{
  "version": 3,
  "file": "utils.js",
  "sourceRoot": "../src/",
  "sources": [
    "utils.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "module.exports =\r\n  cleanObj: (obj) ->\r\n    for key of obj\r\n      if key.indexOf('$') is 0 or key is '#' or not obj.hasOwnProperty(key)\r\n        delete obj[key]\r\n    return\r\n  readDiffs: (from, to, out) ->\r\n    diffs = DeepDiff from, to\r\n    out = out or {}\r\n    if diffs\r\n      for dif in diffs\r\n        switch dif.kind\r\n          when 'E', 'N'\r\n            myout = out\r\n            mypath = dif.path.join('.')\r\n            good = true\r\n            if dif.lhs and dif.rhs and typeof(dif.lhs) isnt typeof(dif.rhs)\r\n              if dif.lhs.toString() is dif.rhs.toString()\r\n                good = false\r\n            if good\r\n              myout[mypath] ={}\r\n              myout = myout[mypath]\r\n              myout.from = dif.lhs\r\n              myout.to = dif.rhs\r\n    out\r\n  makeWhere: (whereObj) ->\r\n    if not whereObj or whereObj.sort or whereObj.sortDir or whereObj.pageSize\r\n      return sql: ''\r\n    props = []\r\n    parent = ''\r\n\r\n    parse = (obj, op, comp) ->\r\n      sql = ''\r\n      writeVal = (key, comp) ->\r\n        fullKey = \"#{parent}`#{key}`\".replace /\\./g, '->'\r\n        fullKey = fullKey.replace /->`\\$[a-z]+`$/, ''\r\n        if obj[key] is null\r\n          if key is '$ne' or key is '$neq'\r\n            sql += \" #{op} #{fullKey} IS NOT NULL\"\r\n          else\r\n            sql += \" #{op} #{fullKey} IS NULL\"\r\n        else\r\n          sql += \" #{op} #{fullKey} #{comp} ?\"\r\n          props.push obj[key]\r\n      for key of obj\r\n        if obj.hasOwnProperty key\r\n          if key is '$or'\r\n            orsql = ''\r\n            for thing in obj[key]\r\n              objsql = parse(thing, 'AND', comp).replace /^ AND /, ''\r\n              if / AND | OR /.test(objsql) and objsql.indexOf('(') isnt 0\r\n                objsql = \"(#{objsql})\"\r\n              orsql += ' OR ' + objsql\r\n            sql += \" #{op} (#{orsql})\".replace /\\( OR /g, '('\r\n          else if key is '$and'\r\n            andsql = ''\r\n            for thing in obj[key]\r\n              andsql += parse(thing, 'AND', comp)\r\n            sql += \" #{op} (#{andsql})\".replace /\\( AND /g, '('\r\n          else if key is '$gt'\r\n            writeVal key, '>'\r\n          else if key is '$lt'\r\n            writeVal key, '<'\r\n          else if key is '$gte'\r\n            writeVal key, '>='\r\n          else if key is '$lte'\r\n            writeVal key, '<='\r\n          else if key is '$eq'\r\n            writeVal key, '='\r\n          else if key is '$neq'\r\n            writeVal key, '!='\r\n          else if key is '$ne'\r\n            writeVal key, '!='\r\n          else if key is '$in'\r\n             writeVal key, 'IN'\r\n          else if key is '$nin'\r\n             writeVal key, 'NOT IN'\r\n          else if key is '$like'\r\n            sql += \" #{op} #{parent.replace(/->$/, '')} LIKE '%#{obj[key]}%'\"\r\n            parent = ''\r\n          else if key is '$null'\r\n            sql += \" #{op} #{parent.replace(/->$/, '')} IS NULL\"\r\n            parent = ''\r\n          else if key is '$nnull'\r\n            sql += \" #{op} #{parent.replace(/->$/, '')} IS NOT NULL\"\r\n            parent = ''\r\n          else if key is '$nn'\r\n            sql += \" #{op} #{parent.replace(/->$/, '')} IS NOT NULL\"\r\n            parent = ''\r\n          else if Object::toString.call(obj[key]) is '[object Object]'\r\n            parent += '`' + key + '`->'\r\n            sql += parse(obj[key], op, comp)\r\n          else\r\n            writeVal key, comp\r\n      parent = ''\r\n      sql\r\n    delete whereObj['#']\r\n    sql = parse(whereObj, 'AND', '=').replace(/(^|\\() (AND|OR) /g, '$1')\r\n    {\r\n      sql: sql\r\n      props: props\r\n    }"
  ]
}